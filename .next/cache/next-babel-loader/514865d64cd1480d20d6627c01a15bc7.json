{"ast":null,"code":"var _jsxFileName = \"/home/cbkm/Documents/IPFS/myapps/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ipfs from '../ipfs';\nimport React, { Component } from 'react';\nconst accepts = [{\n  name: \"images\",\n  acc: \"image/*\"\n}, {\n  name: \"audio\",\n  acc: \"audio/*\"\n}, {\n  name: \"pdf\",\n  acc: \"application/pdf,application/msword,\"\n}];\nexport class index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      file: null,\n      ipfsHash: null,\n      fileformat: \"null\",\n      fileLoaded: false,\n      formatLoaded: false\n    });\n\n    _defineProperty(this, \"captureChange\", event => {\n      console.log(\"caputreFile\");\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          file: Buffer(reader.result),\n          fileLoaded: true\n        });\n        console.log('buffer', this.state.file);\n        console.log(this.setState({\n          fileformat: \"res[0].hash \"\n        }));\n        console.log('ipfsHash', this.state);\n      };\n    });\n\n    _defineProperty(this, \"submit\", async () => {\n      event.preventDefault();\n      console.log(\"onSubmit\");\n      ipfs.files.add(this.state.file, async (err, res) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        await this.setState({\n          ipfsHash: res[0].hash,\n          fileLoaded: true,\n          formatLoaded: false\n        });\n        console.log(res);\n        console.log('ipfsHash', this.state);\n      });\n    });\n\n    _defineProperty(this, \"format\", async event => {\n      let value = event.target.value;\n\n      if (value == \"Choose....\") {\n        await this.setState({\n          formatLoaded: false\n        });\n        return;\n      }\n\n      let format = accepts.find(a => a.name == value).acc;\n      await this.setState({\n        fileformat: format ? format : null,\n        formatLoaded: true\n      });\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, __jsx(\"select\", {\n      onChange: this.format,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, __jsx(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Choose....\"), accepts.map(a => __jsx(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }\n    }, a.name))), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 26\n      }\n    }), this.state.formatLoaded ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, __jsx(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: this.captureChange,\n      accept: this.state.fileformat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }), this.state.fileLoaded ? __jsx(\"button\", {\n      onClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 50\n      }\n    }, \"Submit\") : \"Load file\") : \"Select format\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\", __jsx(\"img\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), __jsx(\"audio\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, __jsx(\"source\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\nexport default index;","map":{"version":3,"sources":["/home/cbkm/Documents/IPFS/myapps/pages/index.js"],"names":["ipfs","React","Component","accepts","name","acc","index","file","ipfsHash","fileformat","fileLoaded","formatLoaded","event","console","log","preventDefault","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","state","add","err","res","error","hash","value","format","find","a","render","map","captureChange","submit"],"mappings":"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","sourcesContent":["import ipfs from '../ipfs';\nimport React, { Component } from 'react'\n\nconst accepts = [\n    { name: \"images\", acc: \"image/*\", },\n    { name: \"audio\", acc: \"audio/*\", },\n    { name: \"pdf\", acc: \"application/pdf,application/msword,\" }\n\n]\n\n\n\n\nexport class index extends Component {\n    state = {\n        file: null,\n        ipfsHash: null,\n        fileformat: \"null\",\n        fileLoaded: false,\n        formatLoaded: false\n    }\n\n    captureChange = (event) => {\n        console.log(\"caputreFile\")\n        event.preventDefault()\n        const file = event.target.files[0]\n        const reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => {\n            this.setState({\n                file: Buffer(reader.result),\n                fileLoaded: true\n            })\n            console.log('buffer', this.state.file)\n            console.log(this.setState({ fileformat: \"res[0].hash \" }))\n            console.log('ipfsHash', this.state)\n        }\n    }\n\n    submit = async () => {\n        event.preventDefault()\n        console.log(\"onSubmit\")\n        ipfs.files.add(this.state.file, async (err, res) => {\n            if (err) {\n                console.error(err)\n                return\n            }\n            await this.setState({\n                ipfsHash: res[0].hash,\n                fileLoaded: true,\n                formatLoaded:false\n            })\n            console.log(res)\n            console.log('ipfsHash', this.state)\n        })\n    }\n    format = async (event) => {\n        let value = event.target.value\n        if (value == \"Choose....\") {\n            await this.setState(\n                {\n                    formatLoaded: false\n                }\n            )\n            return\n        }\n\n        let format = accepts.find(a => a.name == value).acc\n        await this.setState({\n            fileformat: format ? format : null,\n            formatLoaded: true\n\n        })\n        console.log(this.state)\n\n\n\n    }\n    render() {\n        return (\n            <div>\n                <select onChange={this.format}>\n                    <option>Choose....</option>\n                    {\n                        accepts.map(a =>\n                            <option>{a.name}</option>\n                        )\n                    }\n                </select><br />\n                {this.state.formatLoaded ?\n                    <div>\n                        <input type=\"file\" multiple onChange={this.captureChange} accept={this.state.fileformat} />\n                        <br />\n\n                        {this.state.fileLoaded ? <button onClick={this.submit}>Submit</button> : \"Load file\"}\n                    </div>\n\n                    : \"Select format\"}\n                <br />\n                {this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\"}\n                <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} />\n                <audio>\n                    <source src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} />\n                </audio>\n\n\n            </div>\n        )\n    }\n}\n\nexport default index\n\n\n"]},"metadata":{},"sourceType":"module"}