{"ast":null,"code":"var _jsxFileName = \"/home/cbkm/Documents/IPFS/myapps/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ipfs from '../ipfs';\nimport React, { Component } from 'react';\nconst accepts = [{\n  name: \"images\",\n  acc: \"image/*\"\n}, {\n  name: \"audio\",\n  acc: \"audio/*\"\n}, {\n  name: \"pdf\",\n  acc: \"application/pdf,application/msword,\"\n}];\nexport class index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"captureChange\", event => {\n      console.log(\"caputreFile\");\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          file: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.file);\n      };\n    });\n\n    _defineProperty(this, \"submit\", event => {\n      () => {\n        this.setState({\n          format: \"res[0].hash \"\n        });\n        console.log('ipfsHash', this.state.format);\n      };\n\n      event.preventDefault();\n      console.log(\"onSubmit\");\n      ipfs.files.add(this.state.file, async (err, res) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        this.setState({\n          ipfsHash: res[0].hash\n        });\n        console.log(res);\n        console.log('ipfsHash', this.state.ipfsHash);\n      });\n    });\n\n    _defineProperty(this, \"format\", event => {\n      event.preventDefault();\n      console.log(\"onChange\");\n    });\n  }\n\n  componentWillMount() {\n    this.setState({\n      file: null,\n      ipfsHash: null,\n      format: \"null\"\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, __jsx(\"select\", {\n      onChange: this.format,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, __jsx(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, \"Choose....\"), accepts.map(a => __jsx(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, a.name))), __jsx(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: this.captureChange,\n      accept: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      onClick: this.submit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, \"Submit\"), this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\", __jsx(\"img\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\nexport default index;","map":{"version":3,"sources":["/home/cbkm/Documents/IPFS/myapps/pages/index.js"],"names":["ipfs","React","Component","accepts","name","acc","index","event","console","log","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","state","format","add","err","res","error","ipfsHash","hash","componentWillMount","render","map","a","captureChange","submit"],"mappings":"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","sourcesContent":["import ipfs from '../ipfs';\nimport React, { Component } from 'react'\n\nconst accepts = [\n    { name: \"images\", acc: \"image/*\", },\n    { name: \"audio\", acc: \"audio/*\", },\n    { name: \"pdf\", acc: \"application/pdf,application/msword,\" }\n\n]\n\n\n\n\nexport class index extends Component {\n    componentWillMount() {\n        this.setState({\n            file: null,\n            ipfsHash: null,\n            format: \"null\"\n        })\n    }\n\n\n    captureChange = (event) => {\n        console.log(\"caputreFile\")\n        event.preventDefault()\n        const file = event.target.files[0]\n        const reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => {\n            this.setState({ file: Buffer(reader.result) })\n            console.log('buffer', this.state.file)\n        }\n    }\n\n    submit = (event) => {\n        () => {\n            this.setState({ format: \"res[0].hash \" })\n            console.log('ipfsHash', this.state.format)\n        }\n\n        event.preventDefault()\n        console.log(\"onSubmit\")\n        ipfs.files.add(this.state.file, async (err, res) => {\n            if (err) {\n                console.error(err)\n                return\n            }\n            this.setState({ ipfsHash: res[0].hash })\n            console.log(res)\n            console.log('ipfsHash', this.state.ipfsHash)\n\n\n        })\n    }\n    format = (event) => {\n        event.preventDefault()\n        console.log(\"onChange\")\n\n\n\n\n\n\n    }\n    render() {\n        return (\n            <div>\n                <select onChange={this.format}>\n                    <option>Choose....</option>\n                    {\n                        accepts.map(a =>\n                            <option>{a.name}</option>\n                        )\n                    }\n                </select>\n                <input type=\"file\" multiple onChange={this.captureChange} accept=\"\" />\n                <button onClick={this.submit}>Submit</button>\n                {this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\"}\n                <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} />\n\n\n            </div>\n        )\n    }\n}\n\nexport default index\n\n\n"]},"metadata":{},"sourceType":"module"}