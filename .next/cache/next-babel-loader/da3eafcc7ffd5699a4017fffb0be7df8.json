{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ipfs from '../ipfs';\nimport React, { Component } from 'react';\nconst accepts = [{\n  name: \"images\",\n  acc: \"image/*\"\n}, {\n  name: \"audio\",\n  acc: \"audio/*\"\n}, {\n  name: \"pdf\",\n  acc: \"application/pdf,application/msword,\"\n}];\nexport class index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      file: null,\n      ipfsHash: null,\n      fileformat: \"null\",\n      fileLoaded: false,\n      formatLoaded: false\n    });\n\n    _defineProperty(this, \"captureChange\", event => {\n      console.log(\"caputreFile\");\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          file: Buffer(reader.result),\n          fileLoaded: true\n        });\n        console.log('buffer', this.state.file);\n      };\n    });\n\n    _defineProperty(this, \"submit\", async () => {\n      event.preventDefault();\n      console.log(\"onSubmit\");\n      ipfs.files.add(this.state.file, async (err, res) => {\n        if (err) {\n          console.error(err);\n          console.log(\"error\");\n          return;\n        }\n\n        await this.setState({\n          ipfsHash: res[0].hash,\n          fileLoaded: true,\n          formatLoaded: false\n        });\n        console.log(res);\n        console.log('ipfsHash', this.state);\n      });\n    });\n\n    _defineProperty(this, \"format\", async event => {\n      let value = event.target.value;\n\n      if (value == \"Choose....\") {\n        await this.setState({\n          formatLoaded: false\n        });\n        return;\n      }\n\n      let format = accepts.find(a => a.name == value).acc;\n      await this.setState({\n        fileformat: format ? format : null,\n        formatLoaded: true,\n        file: null,\n        ipfsHash: null,\n        fileLoaded: false\n      });\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"select\", {\n      onChange: this.format\n    }, __jsx(\"option\", null, \"Choose....\"), accepts.map(a => __jsx(\"option\", null, a.name))), __jsx(\"br\", null), this.state.formatLoaded ? __jsx(\"div\", null, __jsx(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: this.captureChange,\n      accept: this.state.fileformat\n    }), __jsx(\"br\", null), this.state.fileLoaded ? __jsx(\"button\", {\n      onClick: this.submit\n    }, \"Submit\") : \"Load file\") : \"Select format\", __jsx(\"br\", null), this.state.ipfsHash ? __jsx(\"div\", null, __jsx(\"a\", {\n      href: `https://ipfs.io/ipfs/${this.state.ipfsHash}`\n    }, \"Link\"), __jsx(\"br\", null), this.state.fileformat == accepts[1].acc ? __jsx(\"audio\", {\n      controls: true\n    }, __jsx(\"source\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      type: \"audio/ogg\"\n    }), __jsx(\"source\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      type: \"audio/mpeg\"\n    }), \"Your browser does not support the audio element.\") : this.state.fileformat == accepts[0].acc ? __jsx(\"img\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`,\n      width: \"200\",\n      height: \"200\",\n      alt: \"Wait for image\"\n    }) : this.state.fileformat == accepts[2].acc ? __jsx(\"iframe\", {\n      src: `https://ipfs.io/ipfs/${this.state.ipfsHash}`\n    }) : \"\") : \"Upload some file\", __jsx(\"br\", null));\n  }\n\n}\nexport default index;","map":null,"metadata":{},"sourceType":"module"}