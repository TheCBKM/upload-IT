{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/cbkm/Documents/IPFS/myapps/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ipfs from '../ipfs';\nimport React, { Component } from 'react';\nvar accepts = [{\n  name: \"images\",\n  acc: \"image/*\"\n}, {\n  name: \"audio\",\n  acc: \"audio/*\"\n}, {\n  name: \"pdf\",\n  acc: \"application/pdf,application/msword,\"\n}];\nexport var index = /*#__PURE__*/function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index() {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"captureChange\", function (event) {\n      console.log(\"caputreFile\");\n      event.preventDefault();\n      var file = event.target.files;\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          file: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.file);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submit\", function (event) {\n      event.preventDefault();\n      console.log(\"onSubmit\");\n      ipfs.files.add(_this.state.file, function _callee(err, res) {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!err) {\n                  _context.next = 3;\n                  break;\n                }\n\n                console.error(err);\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _this.setState({\n                  ipfsHash: res[0].hash\n                });\n\n                console.log(res);\n                console.log('ipfsHash', _this.state.ipfsHash);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeFormat\", function (event) {\n      console.log(event.target.value); // let format = accepts.find(a => a.name == event.target.value).acc\n      // console.log(format)\n\n      _this.setState({\n        format: \"rmat\"\n      });\n\n      console.log(_this.state.format);\n    });\n\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        file: null,\n        ipfsHash: null,\n        format: \"null\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }, __jsx(\"select\", {\n        onChange: this.changeFormat,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, __jsx(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, \"Choose....\"), accepts.map(function (a) {\n        return __jsx(\"option\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }\n        }, a.name);\n      })), __jsx(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: this.captureChange,\n        accept: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }), __jsx(\"button\", {\n        onClick: this.submit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }, \"Submit\"), this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\", __jsx(\"img\", {\n        src: \"https://ipfs.io/ipfs/\".concat(this.state.ipfsHash),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return index;\n}(Component);\nexport default index;","map":{"version":3,"sources":["/home/cbkm/Documents/IPFS/myapps/pages/index.js"],"names":["ipfs","React","Component","accepts","name","acc","index","event","console","log","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","state","add","err","res","error","ipfsHash","hash","value","format","changeFormat","map","a","captureChange","submit"],"mappings":"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","sourcesContent":["import ipfs from '../ipfs';\nimport React, { Component } from 'react'\n\nconst accepts = [\n    { name: \"images\", acc: \"image/*\", },\n    { name: \"audio\", acc: \"audio/*\", },\n    { name: \"pdf\", acc: \"application/pdf,application/msword,\" }\n\n]\n\n\n\n\nexport class index extends Component {\n    componentWillMount() {\n        this.setState({\n            file: null,\n            ipfsHash: null,\n            format: \"null\"\n        })\n    }\n\n\n    captureChange = (event) => {\n        console.log(\"caputreFile\")\n        event.preventDefault()\n        const file = event.target.files\n        const reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => {\n            this.setState({ file: Buffer(reader.result) })\n            console.log('buffer', this.state.file)\n        }\n    }\n\n    submit = (event) => {\n        event.preventDefault()\n        console.log(\"onSubmit\")\n        ipfs.files.add(this.state.file, async (err, res) => {\n            if (err) {\n                console.error(err)\n                return\n            }\n            this.setState({ ipfsHash: res[0].hash })\n            console.log(res)\n            console.log('ipfsHash', this.state.ipfsHash)\n\n\n        })\n    }\n    changeFormat = (event) => {\n        console.log(event.target.value)\n        // let format = accepts.find(a => a.name == event.target.value).acc\n        // console.log(format)\n        this.setState({ format: \"rmat\" })\n        console.log(this.state.format)\n\n    }\n    render() {\n        return (\n            <div>\n                <select onChange={this.changeFormat}>\n                    <option>Choose....</option>\n                    {\n                        accepts.map(a =>\n                            <option>{a.name}</option>\n                        )\n                    }\n                </select>\n                <input type=\"file\" multiple onChange={this.captureChange} accept=\"\" />\n                <button onClick={this.submit}>Submit</button>\n                {this.state.ipfsHash ? this.state.ipfsHash : \"Upload some file\"}\n                <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} />\n\n\n            </div>\n        )\n    }\n}\n\nexport default index\n\n\n"]},"metadata":{},"sourceType":"module"}